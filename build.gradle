plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.5.0'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id "com.github.node-gradle.node" version "5.0.0"
}

group = 'com.rba'
version = '0.0.1-SNAPSHOT'

def openapiSpecFolder = "$rootDir/src/main/resources/api/specifications"
def generatedFilesOutputDir = layout.buildDirectory.dir("generated").get().asFile.path

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

openApiGenerate {
    generatorName = 'java'
    inputSpec = openapiSpecFolder + "/new-card-request-openapi-spec.yaml"
    outputDir = generatedFilesOutputDir
    apiPackage = 'com.example.api'
    modelPackage = 'com.example.model'
    invokerPackage = 'com.example.invoker'
    configOptions = [
            dateLibrary    : 'java8',
            library        : 'resttemplate',
            useJakartaEe   : 'true',
            openApiNullable: 'false'
    ]
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:kafka'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jib {
    from {
        image = 'eclipse-temurin:21-jre'
        auth {
            username = ''
            password = ''
        }
    }
    to {
        image = 'my-app:latest'
    }
    container {
        ports = ['8080']
        jvmFlags = ['-Xms512m', '-Xmx512m']
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// Include generated sources in compilation
sourceSets.main.java.srcDir generatedFilesOutputDir + "/src/main/java"

// Delete old generated files before generating
tasks.named("openApiGenerate").configure {
    doFirst {
        delete generatedFilesOutputDir
    }
}

tasks.named("compileJava").configure {
    dependsOn("openApiGenerate")
}


// --- Node plugin config for React frontend ---

node {
    version = '20.5.1'
    npmVersion = '9.8.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
    nodeModulesDir = file("webapp")
}
tasks.register('npmRunBuild', com.github.gradle.node.npm.task.NpmTask) {
    dependsOn(tasks.named('npmInstall'))
    workingDir.set(file("webapp"))
    args.set(['run', 'build'])
}

tasks.register('copyFrontend', Copy) {
    dependsOn(tasks.named('npmRunBuild'))
    from('webapp/dist')
    into('src/main/resources/static')
}

tasks.named('processResources') {
    dependsOn(tasks.named('copyFrontend'))
}

tasks.named('compileJava') {
    dependsOn(tasks.named('copyFrontend'))
}

tasks.named('clean') {
    doFirst {
        delete file('webapp/node_modules')
        delete file('webapp/build')
        delete file('src/main/resources/static')
    }
}